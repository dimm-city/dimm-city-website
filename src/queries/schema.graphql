# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  ne: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentBlockchainOwnershipFiltersInput {
  percentage: FloatFilterInput
  wallet: WalletFiltersInput
  and: [ComponentBlockchainOwnershipFiltersInput]
  or: [ComponentBlockchainOwnershipFiltersInput]
  not: ComponentBlockchainOwnershipFiltersInput
}

input ComponentBlockchainOwnershipInput {
  id: ID
  percentage: Float
  wallet: ID
}

type ComponentBlockchainOwnership {
  id: ID!
  percentage: Float!
  wallet: WalletEntityResponse
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  wallets: WalletFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  wallets: [ID]
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  wallets(
    filters: WalletFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): WalletRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input AbilityFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  shortDescription: StringFilterInput
  slug: StringFilterInput
  ap: IntFilterInput
  rollDice: BooleanFilterInput
  skillTrees: SkillTreeFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: AbilityFiltersInput
  locale: StringFilterInput
  and: [AbilityFiltersInput]
  or: [AbilityFiltersInput]
  not: AbilityFiltersInput
}

input AbilityInput {
  name: String
  mainImage: ID
  description: String
  shortDescription: String
  slug: String
  ap: Int
  rollDice: Boolean
  skillTrees: [ID]
  publishedAt: DateTime
}

type Ability {
  name: String!
  mainImage: UploadFileEntityResponse
  description: String
  shortDescription: String
  slug: String!
  ap: Int
  rollDice: Boolean!
  skillTrees(
    filters: SkillTreeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SkillTreeRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: AbilityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AbilityRelationResponseCollection
  locale: String
}

type AbilityEntity {
  id: ID
  attributes: Ability
}

type AbilityEntityResponse {
  data: AbilityEntity
}

type AbilityEntityResponseCollection {
  data: [AbilityEntity!]!
  meta: ResponseCollectionMeta!
}

type AbilityRelationResponseCollection {
  data: [AbilityEntity!]!
}

input BlockchainFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  configuration: JSONFilterInput
  characterReleases: CharacterReleaseFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [BlockchainFiltersInput]
  or: [BlockchainFiltersInput]
  not: BlockchainFiltersInput
}

input BlockchainInput {
  name: String
  configuration: JSON
  characterReleases: [ID]
  publishedAt: DateTime
}

type Blockchain {
  name: String!
  configuration: JSON
  characterReleases(
    filters: CharacterReleaseFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterReleaseRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type BlockchainEntity {
  id: ID
  attributes: Blockchain
}

type BlockchainEntityResponse {
  data: BlockchainEntity
}

type BlockchainEntityResponseCollection {
  data: [BlockchainEntity!]!
  meta: ResponseCollectionMeta!
}

input CharacterFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  age: IntFilterInput
  height: FloatFilterInput
  noticeableTraits: StringFilterInput
  backstory: StringFilterInput
  clothing: StringFilterInput
  movementDescription: StringFilterInput
  originLocation: LocationFiltersInput
  beliefs: StringFilterInput
  flaws: StringFilterInput
  dreams: StringFilterInput
  race: RaceFiltersInput
  faction: FactionFiltersInput
  playerCharacter: BooleanFilterInput
  user: UsersPermissionsUserFiltersInput
  selectedAbilities: AbilityFiltersInput
  historicalEvents: HistoricalEventFiltersInput
  selectedSkillTrees: SkillTreeFiltersInput
  currentLocation: LocationFiltersInput
  tokenId: StringFilterInput
  characterRoles: CharacterRoleFiltersInput
  release: CharacterReleaseFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: CharacterFiltersInput
  locale: StringFilterInput
  and: [CharacterFiltersInput]
  or: [CharacterFiltersInput]
  not: CharacterFiltersInput
}

input CharacterInput {
  name: String
  mainImage: ID
  age: Int
  height: Float
  noticeableTraits: String
  backstory: String
  clothing: String
  movementDescription: String
  originLocation: ID
  beliefs: String
  flaws: String
  dreams: String
  race: ID
  faction: ID
  playerCharacter: Boolean
  user: ID
  selectedAbilities: [ID]
  historicalEvents: [ID]
  selectedSkillTrees: [ID]
  currentLocation: ID
  tokenId: String
  characterRoles: [ID]
  release: ID
  publishedAt: DateTime
}

type Character {
  name: String!
  mainImage: UploadFileEntityResponse
  age: Int
  height: Float
  noticeableTraits: String
  backstory: String
  clothing: String
  movementDescription: String
  originLocation: LocationEntityResponse
  beliefs: String
  flaws: String
  dreams: String
  race: RaceEntityResponse
  faction: FactionEntityResponse
  playerCharacter: Boolean!
  user: UsersPermissionsUserEntityResponse
  selectedAbilities(
    filters: AbilityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AbilityRelationResponseCollection
  historicalEvents(
    filters: HistoricalEventFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): HistoricalEventRelationResponseCollection
  selectedSkillTrees(
    filters: SkillTreeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SkillTreeRelationResponseCollection
  currentLocation: LocationEntityResponse
  tokenId: String
  characterRoles(
    filters: CharacterRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRoleRelationResponseCollection
  release: CharacterReleaseEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRelationResponseCollection
  locale: String
}

type CharacterEntity {
  id: ID
  attributes: Character
}

type CharacterEntityResponse {
  data: CharacterEntity
}

type CharacterEntityResponseCollection {
  data: [CharacterEntity!]!
  meta: ResponseCollectionMeta!
}

type CharacterRelationResponseCollection {
  data: [CharacterEntity!]!
}

input CharacterReleaseFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  description: StringFilterInput
  contractAddress: StringFilterInput
  characters: CharacterFiltersInput
  blockchain: BlockchainFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: CharacterReleaseFiltersInput
  locale: StringFilterInput
  and: [CharacterReleaseFiltersInput]
  or: [CharacterReleaseFiltersInput]
  not: CharacterReleaseFiltersInput
}

input CharacterReleaseInput {
  name: String
  slug: String
  description: String
  contractAddress: String
  characters: [ID]
  blockchain: ID
  publishedAt: DateTime
}

type CharacterRelease {
  name: String!
  slug: String!
  description: String
  contractAddress: String
  characters(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRelationResponseCollection
  blockchain: BlockchainEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: CharacterReleaseFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterReleaseRelationResponseCollection
  locale: String
}

type CharacterReleaseEntity {
  id: ID
  attributes: CharacterRelease
}

type CharacterReleaseEntityResponse {
  data: CharacterReleaseEntity
}

type CharacterReleaseEntityResponseCollection {
  data: [CharacterReleaseEntity!]!
  meta: ResponseCollectionMeta!
}

type CharacterReleaseRelationResponseCollection {
  data: [CharacterReleaseEntity!]!
}

input CharacterRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  shortDescription: StringFilterInput
  description: StringFilterInput
  skillTrees: SkillTreeFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: CharacterRoleFiltersInput
  locale: StringFilterInput
  and: [CharacterRoleFiltersInput]
  or: [CharacterRoleFiltersInput]
  not: CharacterRoleFiltersInput
}

input CharacterRoleInput {
  name: String
  slug: String
  shortDescription: String
  description: String
  skillTrees: [ID]
  publishedAt: DateTime
}

type CharacterRole {
  name: String
  slug: String
  shortDescription: String
  description: String
  skillTrees(
    filters: SkillTreeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SkillTreeRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: CharacterRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRoleRelationResponseCollection
  locale: String
}

type CharacterRoleEntity {
  id: ID
  attributes: CharacterRole
}

type CharacterRoleEntityResponse {
  data: CharacterRoleEntity
}

type CharacterRoleEntityResponseCollection {
  data: [CharacterRoleEntity!]!
  meta: ResponseCollectionMeta!
}

type CharacterRoleRelationResponseCollection {
  data: [CharacterRoleEntity!]!
}

input FactionFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  shortDescription: StringFilterInput
  description: StringFilterInput
  members: CharacterFiltersInput
  leaders: CharacterFiltersInput
  location: LocationFiltersInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: FactionFiltersInput
  locale: StringFilterInput
  and: [FactionFiltersInput]
  or: [FactionFiltersInput]
  not: FactionFiltersInput
}

input FactionInput {
  name: String
  shortDescription: String
  description: String
  members: [ID]
  leaders: [ID]
  location: ID
  insignia: ID
  slug: String
  publishedAt: DateTime
}

type Faction {
  name: String!
  shortDescription: String
  description: String
  members(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRelationResponseCollection
  leaders(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRelationResponseCollection
  location: LocationEntityResponse
  insignia: UploadFileEntityResponse
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: FactionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): FactionRelationResponseCollection
  locale: String
}

type FactionEntity {
  id: ID
  attributes: Faction
}

type FactionEntityResponse {
  data: FactionEntity
}

type FactionEntityResponseCollection {
  data: [FactionEntity!]!
  meta: ResponseCollectionMeta!
}

type FactionRelationResponseCollection {
  data: [FactionEntity!]!
}

input HistoricalEventFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  date: DateFilterInput
  description: StringFilterInput
  shortDescription: StringFilterInput
  location: LocationFiltersInput
  characters: CharacterFiltersInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: HistoricalEventFiltersInput
  locale: StringFilterInput
  and: [HistoricalEventFiltersInput]
  or: [HistoricalEventFiltersInput]
  not: HistoricalEventFiltersInput
}

input HistoricalEventInput {
  name: String
  date: Date
  description: String
  shortDescription: String
  location: ID
  characters: [ID]
  slug: String
  publishedAt: DateTime
}

type HistoricalEvent {
  name: String!
  date: Date
  description: String!
  shortDescription: String!
  location: LocationEntityResponse
  characters(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRelationResponseCollection
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: HistoricalEventFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): HistoricalEventRelationResponseCollection
  locale: String
}

type HistoricalEventEntity {
  id: ID
  attributes: HistoricalEvent
}

type HistoricalEventEntityResponse {
  data: HistoricalEventEntity
}

type HistoricalEventEntityResponseCollection {
  data: [HistoricalEventEntity!]!
  meta: ResponseCollectionMeta!
}

type HistoricalEventRelationResponseCollection {
  data: [HistoricalEventEntity!]!
}

input LocationFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  shortDescription: StringFilterInput
  races: RaceFiltersInput
  regions: LocationFiltersInput
  region: LocationFiltersInput
  world: WorldFiltersInput
  factions: FactionFiltersInput
  historicalEvents: HistoricalEventFiltersInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: LocationFiltersInput
  locale: StringFilterInput
  and: [LocationFiltersInput]
  or: [LocationFiltersInput]
  not: LocationFiltersInput
}

input LocationInput {
  name: String
  description: String
  mainImage: ID
  shortDescription: String
  races: [ID]
  regions: [ID]
  region: ID
  world: ID
  factions: [ID]
  historicalEvents: [ID]
  slug: String
  publishedAt: DateTime
}

type Location {
  name: String!
  description: String
  mainImage: UploadFileEntityResponse
  shortDescription: String
  races(
    filters: RaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): RaceRelationResponseCollection
  regions(
    filters: LocationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LocationRelationResponseCollection
  region: LocationEntityResponse
  world: WorldEntityResponse
  factions(
    filters: FactionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): FactionRelationResponseCollection
  historicalEvents(
    filters: HistoricalEventFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): HistoricalEventRelationResponseCollection
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: LocationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LocationRelationResponseCollection
  locale: String
}

type LocationEntity {
  id: ID
  attributes: Location
}

type LocationEntityResponse {
  data: LocationEntity
}

type LocationEntityResponseCollection {
  data: [LocationEntity!]!
  meta: ResponseCollectionMeta!
}

type LocationRelationResponseCollection {
  data: [LocationEntity!]!
}

input RaceFiltersInput {
  id: IDFilterInput
  shortDescription: StringFilterInput
  description: StringFilterInput
  playable: BooleanFilterInput
  hp: IntFilterInput
  atk: IntFilterInput
  occupations: StringFilterInput
  appearance: StringFilterInput
  ideals: StringFilterInput
  flaws: StringFilterInput
  desires: StringFilterInput
  problems: StringFilterInput
  name: StringFilterInput
  allies: RaceFiltersInput
  enemies: RaceFiltersInput
  locations: LocationFiltersInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: RaceFiltersInput
  locale: StringFilterInput
  and: [RaceFiltersInput]
  or: [RaceFiltersInput]
  not: RaceFiltersInput
}

input RaceInput {
  shortDescription: String
  description: String
  playable: Boolean
  hp: Int
  atk: Int
  occupations: String
  appearance: String
  ideals: String
  flaws: String
  desires: String
  problems: String
  name: String
  allies: [ID]
  enemies: [ID]
  locations: [ID]
  mainImage: ID
  additionalImages: [ID]
  slug: String
  publishedAt: DateTime
}

type Race {
  shortDescription: String
  description: String
  playable: Boolean
  hp: Int!
  atk: Int!
  occupations: String
  appearance: String!
  ideals: String
  flaws: String
  desires: String
  problems: String
  name: String!
  allies(
    filters: RaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): RaceRelationResponseCollection
  enemies(
    filters: RaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): RaceRelationResponseCollection
  locations(
    filters: LocationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LocationRelationResponseCollection
  mainImage: UploadFileEntityResponse
  additionalImages(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: RaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): RaceRelationResponseCollection
  locale: String
}

type RaceEntity {
  id: ID
  attributes: Race
}

type RaceEntityResponse {
  data: RaceEntity
}

type RaceEntityResponseCollection {
  data: [RaceEntity!]!
  meta: ResponseCollectionMeta!
}

type RaceRelationResponseCollection {
  data: [RaceEntity!]!
}

input SkillTreeFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  slug: StringFilterInput
  characterRoles: CharacterRoleFiltersInput
  abilities: AbilityFiltersInput
  shortDescription: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: SkillTreeFiltersInput
  locale: StringFilterInput
  and: [SkillTreeFiltersInput]
  or: [SkillTreeFiltersInput]
  not: SkillTreeFiltersInput
}

input SkillTreeInput {
  name: String
  description: String
  slug: String
  characterRoles: [ID]
  abilities: [ID]
  shortDescription: String
  publishedAt: DateTime
}

type SkillTree {
  name: String!
  description: String!
  slug: String
  characterRoles(
    filters: CharacterRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRoleRelationResponseCollection
  abilities(
    filters: AbilityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AbilityRelationResponseCollection
  shortDescription: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: SkillTreeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SkillTreeRelationResponseCollection
  locale: String
}

type SkillTreeEntity {
  id: ID
  attributes: SkillTree
}

type SkillTreeEntityResponse {
  data: SkillTreeEntity
}

type SkillTreeEntityResponseCollection {
  data: [SkillTreeEntity!]!
  meta: ResponseCollectionMeta!
}

type SkillTreeRelationResponseCollection {
  data: [SkillTreeEntity!]!
}

enum ENUM_STORY_SYSTEM {
  SugarCube2
  WAA
  Quest
  Ink
}

input StoryFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  shortDescription: StringFilterInput
  characters: CharacterFiltersInput
  locations: LocationFiltersInput
  factions: FactionFiltersInput
  historicalEvents: HistoricalEventFiltersInput
  races: RaceFiltersInput
  slug: StringFilterInput
  system: StringFilterInput
  configuration: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: StoryFiltersInput
  locale: StringFilterInput
  and: [StoryFiltersInput]
  or: [StoryFiltersInput]
  not: StoryFiltersInput
}

input StoryInput {
  name: String
  shortDescription: String
  mainImage: ID
  html: ID
  media: [ID]
  characters: [ID]
  locations: [ID]
  factions: [ID]
  historicalEvents: [ID]
  races: [ID]
  slug: String
  system: ENUM_STORY_SYSTEM
  configuration: JSON
  owners: [ComponentBlockchainOwnershipInput]
  publishedAt: DateTime
}

type Story {
  name: String!
  shortDescription: String!
  mainImage: UploadFileEntityResponse
  html: UploadFileEntityResponse
  media(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  characters(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CharacterRelationResponseCollection
  locations(
    filters: LocationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LocationRelationResponseCollection
  factions(
    filters: FactionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): FactionRelationResponseCollection
  historicalEvents(
    filters: HistoricalEventFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): HistoricalEventRelationResponseCollection
  races(
    filters: RaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): RaceRelationResponseCollection
  slug: String!
  system: ENUM_STORY_SYSTEM
  configuration: JSON
  owners(
    filters: ComponentBlockchainOwnershipFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentBlockchainOwnership]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: StoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): StoryRelationResponseCollection
  locale: String
}

type StoryEntity {
  id: ID
  attributes: Story
}

type StoryEntityResponse {
  data: StoryEntity
}

type StoryEntityResponseCollection {
  data: [StoryEntity!]!
  meta: ResponseCollectionMeta!
}

type StoryRelationResponseCollection {
  data: [StoryEntity!]!
}

input WalletFiltersInput {
  id: IDFilterInput
  blockchain: BlockchainFiltersInput
  address: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [WalletFiltersInput]
  or: [WalletFiltersInput]
  not: WalletFiltersInput
}

input WalletInput {
  blockchain: ID
  address: String
  publishedAt: DateTime
}

type Wallet {
  blockchain: BlockchainEntityResponse
  address: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type WalletEntity {
  id: ID
  attributes: Wallet
}

type WalletEntityResponse {
  data: WalletEntity
}

type WalletEntityResponseCollection {
  data: [WalletEntity!]!
  meta: ResponseCollectionMeta!
}

type WalletRelationResponseCollection {
  data: [WalletEntity!]!
}

input WorldFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  locations: LocationFiltersInput
  description: StringFilterInput
  slug: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [WorldFiltersInput]
  or: [WorldFiltersInput]
  not: WorldFiltersInput
}

input WorldInput {
  name: String
  locations: [ID]
  description: String
  mainImage: ID
  slug: String
  publishedAt: DateTime
}

type World {
  name: String!
  locations(
    filters: LocationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LocationRelationResponseCollection
  description: String
  mainImage: UploadFileEntityResponse
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type WorldEntity {
  id: ID
  attributes: World
}

type WorldEntityResponse {
  data: WorldEntity
}

type WorldEntityResponseCollection {
  data: [WorldEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph =
    ComponentBlockchainOwnership
  | UploadFile
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Ability
  | Blockchain
  | Character
  | CharacterRelease
  | CharacterRole
  | Faction
  | HistoricalEvent
  | Location
  | Race
  | SkillTree
  | Story
  | Wallet
  | World

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

# A string used to identify an i18n locale
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  ability(id: ID, locale: I18NLocaleCode): AbilityEntityResponse
  abilities(
    filters: AbilityFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): AbilityEntityResponseCollection
  blockchain(id: ID): BlockchainEntityResponse
  blockchains(
    filters: BlockchainFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): BlockchainEntityResponseCollection
  character(id: ID, locale: I18NLocaleCode): CharacterEntityResponse
  characters(
    filters: CharacterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): CharacterEntityResponseCollection
  characterRelease(
    id: ID
    locale: I18NLocaleCode
  ): CharacterReleaseEntityResponse
  characterReleases(
    filters: CharacterReleaseFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): CharacterReleaseEntityResponseCollection
  characterRole(id: ID, locale: I18NLocaleCode): CharacterRoleEntityResponse
  characterRoles(
    filters: CharacterRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): CharacterRoleEntityResponseCollection
  faction(id: ID, locale: I18NLocaleCode): FactionEntityResponse
  factions(
    filters: FactionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): FactionEntityResponseCollection
  historicalEvent(id: ID, locale: I18NLocaleCode): HistoricalEventEntityResponse
  historicalEvents(
    filters: HistoricalEventFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): HistoricalEventEntityResponseCollection
  location(id: ID, locale: I18NLocaleCode): LocationEntityResponse
  locations(
    filters: LocationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): LocationEntityResponseCollection
  race(id: ID, locale: I18NLocaleCode): RaceEntityResponse
  races(
    filters: RaceFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): RaceEntityResponseCollection
  skillTree(id: ID, locale: I18NLocaleCode): SkillTreeEntityResponse
  skillTrees(
    filters: SkillTreeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): SkillTreeEntityResponseCollection
  story(id: ID, locale: I18NLocaleCode): StoryEntityResponse
  stories(
    filters: StoryFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): StoryEntityResponseCollection
  wallet(id: ID): WalletEntityResponse
  wallets(
    filters: WalletFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): WalletEntityResponseCollection
  world(id: ID): WorldEntityResponse
  worlds(
    filters: WorldFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): WorldEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createAbility(
    data: AbilityInput!
    locale: I18NLocaleCode
  ): AbilityEntityResponse
  updateAbility(
    id: ID!
    data: AbilityInput!
    locale: I18NLocaleCode
  ): AbilityEntityResponse
  deleteAbility(id: ID!, locale: I18NLocaleCode): AbilityEntityResponse
  createBlockchain(data: BlockchainInput!): BlockchainEntityResponse
  updateBlockchain(id: ID!, data: BlockchainInput!): BlockchainEntityResponse
  deleteBlockchain(id: ID!): BlockchainEntityResponse
  createCharacter(
    data: CharacterInput!
    locale: I18NLocaleCode
  ): CharacterEntityResponse
  updateCharacter(
    id: ID!
    data: CharacterInput!
    locale: I18NLocaleCode
  ): CharacterEntityResponse
  deleteCharacter(id: ID!, locale: I18NLocaleCode): CharacterEntityResponse
  createCharacterRelease(
    data: CharacterReleaseInput!
    locale: I18NLocaleCode
  ): CharacterReleaseEntityResponse
  updateCharacterRelease(
    id: ID!
    data: CharacterReleaseInput!
    locale: I18NLocaleCode
  ): CharacterReleaseEntityResponse
  deleteCharacterRelease(
    id: ID!
    locale: I18NLocaleCode
  ): CharacterReleaseEntityResponse
  createCharacterRole(
    data: CharacterRoleInput!
    locale: I18NLocaleCode
  ): CharacterRoleEntityResponse
  updateCharacterRole(
    id: ID!
    data: CharacterRoleInput!
    locale: I18NLocaleCode
  ): CharacterRoleEntityResponse
  deleteCharacterRole(
    id: ID!
    locale: I18NLocaleCode
  ): CharacterRoleEntityResponse
  createFaction(
    data: FactionInput!
    locale: I18NLocaleCode
  ): FactionEntityResponse
  updateFaction(
    id: ID!
    data: FactionInput!
    locale: I18NLocaleCode
  ): FactionEntityResponse
  deleteFaction(id: ID!, locale: I18NLocaleCode): FactionEntityResponse
  createHistoricalEvent(
    data: HistoricalEventInput!
    locale: I18NLocaleCode
  ): HistoricalEventEntityResponse
  updateHistoricalEvent(
    id: ID!
    data: HistoricalEventInput!
    locale: I18NLocaleCode
  ): HistoricalEventEntityResponse
  deleteHistoricalEvent(
    id: ID!
    locale: I18NLocaleCode
  ): HistoricalEventEntityResponse
  createLocation(
    data: LocationInput!
    locale: I18NLocaleCode
  ): LocationEntityResponse
  updateLocation(
    id: ID!
    data: LocationInput!
    locale: I18NLocaleCode
  ): LocationEntityResponse
  deleteLocation(id: ID!, locale: I18NLocaleCode): LocationEntityResponse
  createRace(data: RaceInput!, locale: I18NLocaleCode): RaceEntityResponse
  updateRace(
    id: ID!
    data: RaceInput!
    locale: I18NLocaleCode
  ): RaceEntityResponse
  deleteRace(id: ID!, locale: I18NLocaleCode): RaceEntityResponse
  createSkillTree(
    data: SkillTreeInput!
    locale: I18NLocaleCode
  ): SkillTreeEntityResponse
  updateSkillTree(
    id: ID!
    data: SkillTreeInput!
    locale: I18NLocaleCode
  ): SkillTreeEntityResponse
  deleteSkillTree(id: ID!, locale: I18NLocaleCode): SkillTreeEntityResponse
  createStory(data: StoryInput!, locale: I18NLocaleCode): StoryEntityResponse
  updateStory(
    id: ID!
    data: StoryInput!
    locale: I18NLocaleCode
  ): StoryEntityResponse
  deleteStory(id: ID!, locale: I18NLocaleCode): StoryEntityResponse
  createWallet(data: WalletInput!): WalletEntityResponse
  updateWallet(id: ID!, data: WalletInput!): WalletEntityResponse
  deleteWallet(id: ID!): WalletEntityResponse
  createWorld(data: WorldInput!): WorldEntityResponse
  updateWorld(id: ID!, data: WorldInput!): WorldEntityResponse
  deleteWorld(id: ID!): WorldEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  createAbilityLocalization(
    id: ID
    data: AbilityInput
    locale: I18NLocaleCode
  ): AbilityEntityResponse
  createCharacterLocalization(
    id: ID
    data: CharacterInput
    locale: I18NLocaleCode
  ): CharacterEntityResponse
  createCharacterReleaseLocalization(
    id: ID
    data: CharacterReleaseInput
    locale: I18NLocaleCode
  ): CharacterReleaseEntityResponse
  createCharacterRoleLocalization(
    id: ID
    data: CharacterRoleInput
    locale: I18NLocaleCode
  ): CharacterRoleEntityResponse
  createFactionLocalization(
    id: ID
    data: FactionInput
    locale: I18NLocaleCode
  ): FactionEntityResponse
  createHistoricalEventLocalization(
    id: ID
    data: HistoricalEventInput
    locale: I18NLocaleCode
  ): HistoricalEventEntityResponse
  createLocationLocalization(
    id: ID
    data: LocationInput
    locale: I18NLocaleCode
  ): LocationEntityResponse
  createRaceLocalization(
    id: ID
    data: RaceInput
    locale: I18NLocaleCode
  ): RaceEntityResponse
  createSkillTreeLocalization(
    id: ID
    data: SkillTreeInput
    locale: I18NLocaleCode
  ): SkillTreeEntityResponse
  createStoryLocalization(
    id: ID
    data: StoryInput
    locale: I18NLocaleCode
  ): StoryEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
